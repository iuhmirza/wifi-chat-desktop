import { app, BrowserWindow, ipcMain, ipcRenderer, webContents } from 'electron';
import WebSocket from 'ws';
import Bonjour, { Service } from 'bonjour-service'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const CHAT_WINDOW_WEBPACK_ENTRY: string;
declare const CHAT_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const servers: Service[] = [];

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.webContents.on('did-finish-load', function () {
    const bonjour = new Bonjour()

    const browser = bonjour.find({ type: 'wifichat' }, function (service) {
      console.log(service)
      mainWindow.webContents.send('server', service.name, servers.length)
      servers.push(service)
    })

    browser.start()

  })
  ipcMain.on('connect', function () {
    mainWindow.close()
  })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

let ws: WebSocket;

ipcMain.on('connect', function (event, username, index) {
  const server = servers[index]
  const chatWindow = new BrowserWindow({
    webPreferences: {
      preload: CHAT_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  chatWindow.loadURL(CHAT_WINDOW_WEBPACK_ENTRY)
  chatWindow.webContents.on('did-finish-load', function () {
    chatWindow.webContents.send('username', username)
    ws = new WebSocket(`ws://${server.addresses[0]}:${server.port}/text`)
    ws.onmessage = function (event) {
      chatWindow.webContents.send('receiveMsg', JSON.parse(event.data.toString()));
    }
  })
})

ipcMain.on('sendMsg', function (event, username: string, content: string) {
  ws.send(`{"username":"${username}","content":"${content}"}`)
})
// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    ws?.close(1000, "Disconnecting")
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
